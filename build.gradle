buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://maven.parchmentmc.org' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forge_gradle_version}", changing: true
		classpath "org.parchmentmc:librarian:${librarian_version}"
	}
}

plugins {
	id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
	id 'com.modrinth.minotaur' version "${minotaur_version}"
	id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version "${gradle_changelog_version}"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = "${mod_base_package}.${mod_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
	library
	implementation.extendsFrom library
}

minecraft {
	mappings channel: "${mappings_channel}", version: "${mappings_version}"
	// accessTransformer = file('accesstransformer.cfg')

	runs {
		client {
			taskName 'Client'
			workingDirectory project.file('run/client')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enabledGameTestNamespaces', mod_id

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		if(project.hasProperty('mc_uuid') & project.hasProperty('mc_username')) {
			clientAuthed {
				parent runs.client
				taskName 'Client-Authed'
				args '--uuid', project.getProperty('mc_uuid'), '--username', project.getProperty('mc_username')
			}
		}

		server {
			taskName 'Server'
			workingDirectory project.file('run/server')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enabledGameTestNamespaces', mod_id
			args 'nogui'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		gameTestServer {
			taskName 'GameTestServer'
			workingDirectory rootProject.file('run/server')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enabledGameTestNamespaces', mod_id
			args 'nogui'
			singleInstance true

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		data {
			taskName 'Data'
			workingDirectory project.file('run/client')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			// ForgeGradle will just force-exit the Gradle Daemon which fails our builds in case
			// a daemon is used for any reason.
			forceExit false

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
	}
}

minecraft.runs.all {
	lazyToken('minecraft_classpath') {
		configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
	}
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

repositories {
	mavenCentral()
	maven { url 'https://dvs1.progwml6.com/files/maven' }
	maven { url 'https://maven.tterrag.com/' }
	maven { url 'https://maven.apexmods.xyz/' }
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	annotationProcessor "org.spongepowered:mixin:${mixin_ap_version}:processor"

	compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
	runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
}

def resourceTargets = [ 'META-INF/mods.toml', '**/*.mcmeta' ]
def intoTargets = [ "${projectDir}/out/production/resources/", "${projectDir}/out/production/${project.name}.main/", "${projectDir}/bin/main/" ]
def replaceProperties = project.properties

processResources {
	filesMatching(resourceTargets) {
		expand replaceProperties
	}

	intoTargets.each { target ->
		if(file(target).exists()) {
			copy{
				from(sourceSets.main.resources) {
					include resourceTargets
					expand replaceProperties
				}

				into target
			}
		}
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	from sourceSets.main.allJava
	from sourceSets.main.resources
}

task deobfJar(type: Jar) {
	classifier 'deobf'
	from sourceSets.main.output
}

jar {
	from sourceSets.main.output.classesDirs
	from sourceSets.main.output.resourcesDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives deobfJar
}

def previousGitTag = { ->
	def code = new ByteArrayOutputStream()

	exec {
		commandLine 'git', 'describe', '--tags', '--match', 'v*', '--exclude', "v${mod_version}"
		standardOutput code
	}

	return code.toString().trim().split('-')[0]
}

task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
	file = file("CHANGELOG.md")
	fromRepo = file('.')
	fromRef = "${previousGitTag}"
	// toRef = "v${mod_version}"
	templateContent = file('.github/changelog.mustache').text
			.replace('{mod_version}', "${mod_version}")
			.replace('{mod_name}', "${mod_name}")
			.replace('{last_tag}', "${previousGitTag}")
}

tasks.withType(Jar) {
	from file('CHANGELOG.md')
	from file('LICENSE')

	manifest {
		attributes([
				'Specification-Title': "${mod_name}",
				'Specification-Vendor': "${mod_authors}",
				'Specification-Version': "${mod_version}",
				'Implementation-Title': "${mod_name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor' : "${mod_authors}",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

jar.finalizedBy('reobfJar')

if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId = "${mod_base_package}"
				artifactId = "${mod_id}"
				version = "${minecraft_version}-${mod_version}"

				artifact jar
				artifact sourcesJar
				artifact deobfJar
			}
		}
		repositories {
			maven {
				name 'ApexMods-Maven'
				url 'https://apexmodder.jfrog.io/artifactory/mods-maven/'

				credentials {
					username System.getenv('APEX_MODS_MAVEN_USERNAME')
					password System.getenv('APEX_MODS_MAVEN_PASSWORD')
				}
			}
		}
	}
}

if(System.getenv('CURSEFORGE_TOKEN') != null) {
	curseforge {
		apiKey = System.getenv('CURSEFORGE_TOKEN')

		project {
			id = "${mod_curseforge_id}"
			releaseType = "${mod_release_type}"
			addGameVersion "${minecraft_version}"
			changelogType = 'markdown'
			changelog = file('CHANGELOG.md').text

			mainArtifact jar
			addArtifact sourcesJar
			addArtifact deobfJar
		}

		options {
			detectNewerJava = true
		}
	}
}

if(System.getenv('MODRINTH_TOKEN') != null) {
	modrinth {
		token = System.getenv('MODRINTH_TOKEN')
		projectId = "${mod_modrinth_id}"
		versionNumber = "${mod_version}"
		versionName = "${mod_name}-${minecraft_version}-${mod_version}"
		versionType = "${mod_release_type}"
		uploadFile = jar
		additionalFiles = [ sourcesJar, deobfJar ]
		gameVersions = [ "${minecraft_version}" ]
		changelog = file('CHANGELOG.md').text
		loaders = [ 'forge' ]
		dependencies = [ ]
	}
}