plugins {
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'dev.architectury.loom' version '1.4-SNAPSHOT' apply false
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id 'com.palantir.git-version' version '1.0.0' apply false
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.77.2' apply false
    id 'me.modmuss50.mod-publish-plugin' version '0.+' apply false
    id 'org.groovymc.modsdotgroovy' version '1.4.2' apply false
}

apply plugin: 'base'
apply plugin: 'com.palantir.git-version'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
apply plugin: 'org.groovymc.modsdotgroovy'
apply plugin: 'me.modmuss50.mod-publish-plugin'

def repo = versionDetails()
def lastGitTag = repo.commitDistance > 0 ? repo.lastTag : "git describe --abbrev=0 ${repo.lastTag}^".execute().text.trim()

ext {
    MOD_VERSION_FULL = "${MOD_VERSION}.${repo.commitDistance}"
    ACCESS_WIDENER_FILE = file("platforms/common/src/main/resources/${MOD_ID}.accesswidener")
}

architectury {
    minecraft = "${MINECRAFT_VERSION}"
    compileOnly()
    injectInjectables = false
}

modsDotGroovy {
    dslVersion = '1.5.1'
    platform = 'multiloader'

    multiloader {
        common = project(':common')
        fabric = [ findProject(':fabric') ]
        forge = [ findProject(':mcforge') ]
    }
}

afterEvaluate {
    tasks.register('collectJars', Copy) {
        def tasks = [ ]

        subprojects.each {
            tasks += it.tasks.named('remapJar')
            tasks += it.tasks.named('remapSourcesJar')
        }

        dependsOn tasks
        from tasks
        into file('jars')
    }

    assemble {
        dependsOn collectJars
    }
}

tasks.register('generateChangelogPlain', se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    settingsFile = file('changelogs/settings.json')
    fromRepo = projectDir
    file = file('changelogs/changelog.txt')
    fromRef = lastGitTag
    templateContent = file('changelogs/changelog.txt.mustache').text
}

tasks.register('generateChangelogHtml', se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    settingsFile = file('changelogs/settings.json')
    fromRepo = projectDir
    file = file('changelogs/changelog.html')
    fromRef = lastGitTag
    templateContent = file('changelogs/changelog.html.mustache').text
}

tasks.register('generateChangelogMarkdown', se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    settingsFile = file('changelogs/settings.json')
    fromRepo = projectDir
    file = file('changelogs/changelog.md')
    fromRef = lastGitTag
    templateContent = file('changelogs/changelog.md.mustache').text
}

tasks.register('generateChangelogs') {
    dependsOn([ tasks.named('generateChangelogPlain'), tasks.named('generateChangelogHtml'), tasks.named('generateChangelogMarkdown') ])
}

tasks.register('publishChangelog') {
    onlyIf {
        providers.environmentVariable('APEXSTUDIOS_CHANGELOG_SERVER_KEY').isPresent()
    }

    dependsOn tasks.named('generateChangelogs')

    doLast {
        def req = new URL("https://updates.apexstudios.dev/${MOD_ID}/${MOD_VERSION_FULL}").openConnection() as HttpURLConnection
        req.setRequestMethod('PUT')
        req.setRequestProperty('Content-Type', 'text/plain; charset=UTF-8')
        req.setRequestProperty('X-Api-Key', providers.environmentVariable('APEXSTUDIOS_CHANGELOG_SERVER_KEY').get())
        req.setDoOutput(true)
        req.getOutputStream().write(file('changelogs/changelog.txt').bytes)
        logger.lifecycle(":publishChangelogResponse: '${req.responseMessage}'")
    }
}

publishMods {
    def fabric = findProject(':fabric')
    def mcforge = findProject(':mcforge')

    def modrinthKey = providers.environmentVariable('MODRINTH_TOKEN')
    def curseforgeKey = providers.environmentVariable('CURSEFORGE_TOKEN')
    def discordKey = providers.environmentVariable('DISCORD_CHANGELOG_WEBHOOK_URL')

    // ApexStudios
    def emojis = [
            'modrinth': '<:modrinth:1087664953235869696>',
            'curseforge': '<:curseforge:1087664975121752085>',
            'minecraft': '<:minecraft:1087669093974421544>',
            'mcforge': '<:forge:1087669091487195205>',
            'neoforge': '<:neoforge:1138457156757241918>',
            'fabric': '<:fabric:1107901914923925585>',
            'github': '<:github:1087671203642216521>'
    ]

    // TestServer
    /*def emojis = [
            'modrinth': '<:modrinth:1087665302067740722>',
            'curseforge': '<:curseforge:1087665287186366504>',
            'minecraft': '<:minecraft:1087667250565226536>',
            'mcforge': '<:forge:1087667248371605524>',
            'neoforge': '<:neoforge:1138456184618242189>',
            'fabric': '<:fabric:1138459723314769950>',
            'github': '<:github:1087671103360614400>'
    ]*/

    changelog = file('changelogs/changelog.md').exists() ? file('changelogs/changelog.md').text : ''
    type = me.modmuss50.mpp.ReleaseType.of("${MOD_RELEASE_TYPE}")
    maxRetries = 5
    dryRun = !(discordKey.isPresent() && (modrinthKey.isPresent() || curseforgeKey.isPresent()))
    version = "${MOD_VERSION_FULL}"

    // use afterEvaluate as projects have not evaluated yet
    // leading to missing remapJar / remapSourcesJar tasks

    if(fabric != null) {
        fabric.afterEvaluate {
            if(modrinthKey.isPresent()) {
                modrinth('modrinthFabric') {
                    minecraftVersions.add("${MINECRAFT_VERSION}")
                    projectId = "${MOD_MODRINTH_ID}"
                    accessToken = modrinthKey.get()
                    file = fabric.remapJar.archiveFile
                    additionalFiles.from(fabric.remapSourcesJar.archiveFile)
                    displayName = "[Fabric] ${MOD_NAME} - ${MOD_VERSION_FULL}"
                    modLoaders.add('fabric')
                    announcementTitle = "Download from ${emojis['modrinth']} Modrinth for ${emojis['fabric']} Fabric ${FABRIC_API_VERSION}"

                    requires {
                        slug = "${FABRIC_MODRINTH_ID}"
                    }
                }
            }

            if(curseforgeKey.isPresent()) {
                curseforge('curseforgeFabric') {
                    minecraftVersions.add("${MINECRAFT_VERSION}")
                    projectId = "${MOD_CURSEFORGE_ID}"
                    accessToken = curseforgeKey.get()
                    file = fabric.remapJar.archiveFile
                    additionalFiles.from(fabric.remapSourcesJar.archiveFile)
                    displayName = "[Fabric] ${MOD_NAME} - ${MOD_VERSION_FULL}"
                    modLoaders.add('fabric')
                    announcementTitle = "Download from ${emojis['curseforge']} CurseForge for ${emojis['fabric']} Fabric ${FABRIC_API_VERSION}"

                    requires {
                        slug = "${FABRIC_CURSEFORGE_SLUG}"
                    }
                }
            }
        }
    }

    if(mcforge != null) {
        mcforge.afterEvaluate {
            if(modrinthKey.isPresent()) {
                modrinth('modrinthMinecraftForge') {
                    minecraftVersions.add("${MINECRAFT_VERSION}")
                    projectId = "${MOD_MODRINTH_ID}"
                    accessToken = modrinthKey.get()
                    file = mcforge.remapJar.archiveFile
                    additionalFiles.from(mcforge.remapSourcesJar.archiveFile)
                    displayName = "[MinecraftForge] ${MOD_NAME} - ${MOD_VERSION_FULL}"
                    modLoaders.add('forge')
                    announcementTitle = "Download from ${emojis['modrinth']} Modrinth for ${emojis['mcforge']} MinecraftForge ${MCFORGE_VERSION}"
                }
            }

            if(curseforgeKey.isPresent()) {
                curseforge('curseforgeMinecraftForge') {
                    minecraftVersions.add("${MINECRAFT_VERSION}")
                    projectId = "${MOD_CURSEFORGE_ID}"
                    accessToken = curseforgeKey.get()
                    file = mcforge.remapJar.archiveFile
                    additionalFiles.from(mcforge.remapSourcesJar.archiveFile)
                    displayName = "[MinecraftForge] ${MOD_NAME} - ${MOD_VERSION_FULL}"
                    modLoaders.add('forge')
                    announcementTitle = "Download from ${emojis['curseforge']} CurseForge for ${emojis['mcforge']} MinecraftForge ${MCFORGE_VERSION}"
                }
            }
        }
    }

    if(discordKey.isPresent() && (modrinthKey.isPresent() || curseforgeKey.isPresent())) {
        def changelogText = file('changelogs/changelog.md').text.split('\n').take(8).join('\n')

        discord {
            webhookUrl = discordKey.get()
            username = "${MOD_NAME}"
            avatarUrl = "https://raw.githubusercontent.com/ApexStudios-Dev/.github/master/assets/minecraft/${MOD_ID}_logo.png"
            content = "# ${MOD_NAME} - v${MOD_VERSION_FULL}\n${changelogText}\n[See here for full changelog](https://updates.apexstudios.dev/${MOD_ID}/${MOD_VERSION_FULL})\n"
        }
    }
}

afterEvaluate {
    tasks.withType(me.modmuss50.mpp.PublishModTask).configureEach {
        dependsOn([ tasks.named('generateChangelogs'), tasks.named('publishChangelog') ])
    }
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'

    group = "${MOD_GROUP}"
    version = "${MOD_VERSION_FULL}"
    base.archivesName = "${MOD_ID}-${project.name}"

    sourceSets {
        test {
            java.srcDirs = [ ]
            resources.srcDirs = [ ]
        }
    }

    architectury {
        compileOnly()
        injectInjectables = false
    }

    loom {
        if(ACCESS_WIDENER_FILE.exists()) {
            accessWidenerPath = ACCESS_WIDENER_FILE
        }

        mixin.defaultRefmapName = "${MOD_ID}.refmap.json"
        silentMojangMappingsLicense()
    }

    repositories {
        mavenLocal()
        maven { url 'https://maven.covers1624.net/' }

        maven {
            url 'https://maven.parchmentmc.org'
            content {
                includeGroupByRegex 'org\\.parchmentmc.*'
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"

        mappings(loom.layered {
            officialMojangMappings()

            if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
                if(rootProject.hasProperty('PARCHMENT_DEV_MINECRAFT_VERSION')) {
                    parchment "org.parchmentmc.data:parchment-${PARCHMENT_DEV_MINECRAFT_VERSION}:${PARCHMENT_MAPPINGS}@zip"
                } else {
                    parchment "org.parchmentmc.data:parchment-${MINECRAFT_VERSION}:${PARCHMENT_MAPPINGS}@zip"
                }
            }
        })
    }

    processResources {
        project.properties.each {
            inputs.property "${it.key}", "${it.value}"
        }

        filesMatching([ '*.mixins.json', 'pack.mcmeta' ]) {
            expand project.properties
        }

        from rootProject.file('changelogs/changelog.md')
        from rootProject.file('LICENSE')
        from rootProject.file('README.MD')
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
        }

        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.release.set(JavaLanguageVersion.of("${JAVA_VERSION}").asInt())

        javaToolchains {
            compilerFor {
                languageVersion.set(JavaLanguageVersion.of("${JAVA_VERSION}"))
            }
        }
    }

    jar {
        dependsOn rootProject.tasks.named('generateChangelogs')

        manifest {
            attributes([
                    'Specification-Title': "${MOD_ID}",
                    'Specification-Vendor': 'ApexStudios',
                    'Specification-Version': "${MINECRAFT_VERSION}",
                    'Implementation-Title': "${project.name}",
                    'Implementation-Version': "${project.version}",
                    'Implementation-Vendor': 'ApexStudios',
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    remapJar {
        archiveClassifier = ''
    }

    tasks.withType(AbstractArchiveTask).configureEach {
        reproducibleFileOrder = true
        preserveFileTimestamps = false
    }

    publishing {
        publications {
            release(MavenPublication) {
                groupId = "${MOD_GROUP}"
                artifactId = "${MOD_ID}-${project.name}"
                version = "${MOD_VERSION_FULL}"
                from components.java
            }
        }

        repositories {
            if(providers.environmentVariable('MAVEN_PASSWORD').isPresent()) {
                maven {
                    name 'releases'
                    url 'https://nexus.covers1624.net/repository/apex-releases'

                    credentials {
                        username 'apex'
                        password providers.environmentVariable('MAVEN_PASSWORD').get()
                    }
                }
            }
        }
    }
}

idea.module {
    excludeDirs += [
            file('.idea'),
            file('.gradle'),
            file('gradle')
    ]

    [ 'fabric', 'neoforge', 'mcforge' ].forEach {
        if(findProject(":${it}") == null) {
            excludeDirs += [ file("platforms/${it}") ]
        }
    }
}