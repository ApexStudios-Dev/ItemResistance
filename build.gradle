plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'

	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.+'
	id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.8'
	id 'net.minecraftforge.gradle' version '5.1.+'
	id 'org.spongepowered.mixin' version '0.7.+'
}

version = "${mod_version}"
group = "${mod_base_package}"
archivesBaseName = "${mod_id}-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jarJar.enable()

configurations {
	library
	implementation.extendsFrom library
}

minecraft {
	mappings channel: 'official', version: "${minecraft_version}"
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			taskName 'Client'
			workingDirectory file('run/client')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		if(project.hasProperty('mc_uuid') & project.hasProperty('mc_username')) {
			clientAuthed {
				parent runs.client
				taskName 'Client-Authed'
				args '--uuid', project.getProperty('mc_uuid'), '--username', project.getProperty('mc_username')
			}
		}

		server {
			taskName 'Server'
			workingDirectory file('run/server')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			args 'nogui'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		data {
			taskName 'Data'
			workingDirectory file('run/client')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			args '--mod', mod_id, '--client', '--server', '--validate', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', commonality_mod_id
			// ForgeGradle will just force-exit the Gradle Daemon which fails our builds in case
			// a daemon is used for any reason.
			forceExit false

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
	}
}

minecraft.runs.all {
	lazyToken('minecraft_classpath') {
		configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
	}
}

if(file("./src/main/resources/${mod_id}.mixins.json").exists()) {
	mixin {
		add sourceSets.main, "${mod_id}.refmap.json"
		config "${mod_id}.mixins.json"
	}
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

repositories {
	mavenCentral()
	mavenLocal()
	maven { url 'https://dvs1.progwml6.com/files/maven' }
	maven { url 'https://maven.tterrag.com/' }
	maven { url 'https://maven.apexmods.xyz/' }

	maven {
		url 'https://cursemaven.com'

		content {
			includeGroup "curse.maven"
		}
	}

	maven {
		url 'https://api.modrinth.com/maven'
		content {
			includeGroup 'maven.modrinth'
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

	compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
	compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
	runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

	implementation fg.deobf("${mod_base_package}:${commonality_mod_id}-${minecraft_version}:${commonality_version}")
	jarJar(group: "${mod_base_package}", name: "${commonality_mod_id}-${minecraft_version}", version: "${commonality_version_range}")
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	from sourceSets.main.allJava
	from sourceSets.main.resources
}

tasks.jarJar.configure {
	classifier ''
}

jar {
	classifier 'slim'
	from sourceSets.main.output.classesDirs
	from sourceSets.main.output.resourcesDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives tasks.jarJar
}

if(System.getenv('GENERATE_CHANGELOG') != null) {
	def previousGitTag
	def prefix = 'v'
	def suffix = ''

	if(mod_release_type == 'prerelease') {
		prefix = 'pv'
	} else if(mod_release_type == 'alpha' || mod_release_type == 'beta') {
		suffix = "${mod_release_type}".toUpperCase()
	}

	def currentGitTag = "${prefix}${mod_version}${suffix}"

	try {
		def code = new ByteArrayOutputStream()

		exec {
			commandLine 'git', 'describe', '--abbrev=0', '--tags', '--exclude', currentGitTag
			standardOutput code
		}

		previousGitTag = code.toString().trim()
	} catch(e) {
		previousGitTag = ''
	}

	task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
		file = file("CHANGELOG.md")
		fromRepo = file('.')
		fromRef = "${previousGitTag}"
		toRef = "v${mod_version}"
		templateContent = file('.github/changelog.mustache').text
		                                                    .replace('{current_tag}', "${currentGitTag}")
		                                                    .replace('{mod_git_url}', "${mod_git_url}")
		                                                    .replace('{last_tag}', "${previousGitTag}")
	}
}

tasks.withType(Jar) {
	from file('CHANGELOG.md')
	from file('LICENSE')

	manifest {
		attributes([
				'Specification-Title': "${mod_name}",
				'Specification-Vendor': "${mod_authors}",
				'Specification-Version': "${mod_version}",
				'Implementation-Title': "${mod_name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor' : "${mod_authors}",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	if(file("./src/main/resources/${mod_id}.mixins.json").exists()) {
		manifest {
			attributes 'MixinConfigs': "${mod_id}.mixins.json"
		}
	}
}

jar.finalizedBy('reobfJar')
tasks.jarJar.finalizedBy('reobfJarJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = "${mod_base_package}"
			artifactId = "${mod_id}-${minecraft_version}"
			version = "${mod_version}"

			artifact jar
			artifact sourcesJar
			artifact tasks.jarJar
		}
	}
	repositories {
		mavenLocal()

		if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
			maven {
				name 'ApexMods-Maven'
				url 'https://apexmodder.jfrog.io/artifactory/mods-maven/'

				credentials {
					username System.getenv('APEX_MODS_MAVEN_USERNAME')
					password System.getenv('APEX_MODS_MAVEN_PASSWORD')
				}
			}
		}
	}
}

if(System.getenv('CURSEFORGE_TOKEN') != null) {
	curseforge {
		apiKey = System.getenv('CURSEFORGE_TOKEN')

		project {
			id = "${mod_curseforge_id}"
			releaseType = "${mod_release_type}"
			addGameVersion "${minecraft_version}"
			changelogType = 'markdown'
			changelog = file('CHANGELOG.md').text

			mainArtifact tasks.jarJar
			addArtifact sourcesJar
			addArtifact jar
		}

		options {
			detectNewerJava = true
		}
	}
}

if(System.getenv('MODRINTH_TOKEN') != null) {
	modrinth {
		token = System.getenv('MODRINTH_TOKEN')
		projectId = "${mod_modrinth_id}"
		versionNumber = "${mod_version}"
		versionName = "${mod_name}-${minecraft_version}-${mod_version}"
		versionType = "${mod_release_type}"
		uploadFile = tasks.jarJar
		additionalFiles = [ jar, sourcesJar ]
		gameVersions = [ "${minecraft_version}" ]
		changelog = file('CHANGELOG.md').text
		loaders = [ 'forge' ]
		dependencies = [ ]
	}
}