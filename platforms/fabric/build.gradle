apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    bundle {
        canBeConsumed = false
        canBeResolved = true
    }

    common
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

sourceSets {
    main.resources.srcDirs += [ 'src/generated/resources' ]
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        client {
            client()
            ideConfigGenerated true

            // Some of these may require JBR
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            vmArg '-XX:+IgnoreUnrecognizedVMOptions'
            vmArg '-XX:+AllowRedefinitionToAddDeleteMethods'

            afterEvaluate {
                vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            }
        }

        server {
            server()
            ideConfigGenerated true

            // Requires JBR
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            vmArg '-XX:+IgnoreUnrecognizedVMOptions'
            vmArg '-XX:+AllowRedefinitionToAddDeleteMethods'

            afterEvaluate {
                vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            }
        }

        data {
            server()
            ideConfigGenerated true
            vmArg '-Dfabric-api.datagen'
            vmArg "-Dfabric-api.datagen.output-dir=${project(':common').file('src/generated/resources')}"
            vmArg "-Dfabric-api.datagen.modid=${MOD_ID}"
        }
    }

    mods {
        main {
            sourceSet project(':common').sourceSets.main
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"

    if(rootProject.hasProperty('FABRIC_API_MINECRAFT_VERSION')) {
        modApi "net.fabricmc.fabric-api:fabric-api:${FABRIC_API_VERSION}+${FABRIC_API_MINECRAFT_VERSION}"
    } else {
        modApi "net.fabricmc.fabric-api:fabric-api:${FABRIC_API_VERSION}+${MINECRAFT_VERSION}"
    }

    bundle(project(path: ':common', configuration: 'transformProductionFabric')) { transitive false }
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    if(rootProject.hasProperty('APEXCORE_DEV_VERSION')) {
        modImplementation "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_DEV_VERSION}"
    } else {
        modImplementation "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_VERSION}"
    }
}

tasks.register('copyAccessWidener', Copy) {
    from ACCESS_WIDENER_FILE
    into file('src/generated/resources')
}

processResources {
    dependsOn copyAccessWidener
}

jar {
    archiveClassifier = 'dev-slim'
}

shadowJar {
    exclude 'architectury.common.json'
    archiveClassifier = 'dev-shadow'
    configurations = [ project.configurations.bundle ]
}

sourcesJar {
    dependsOn copyAccessWidener
}

remapJar {
    dependsOn shadowJar
    inputFile.set shadowJar.archiveFile
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}