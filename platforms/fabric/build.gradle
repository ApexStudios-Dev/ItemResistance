apply plugin: 'fabric-loom'
apply plugin: 'me.modmuss50.mod-publish-plugin'

loom {
    if(getRootProject().file("${AW_FILE}").exists()) {
        accessWidenerPath = getRootProject().file("${AW_FILE}")
    }

    mixin.defaultRefmapName = "${MOD_ID}.refmap.json"

    runs {
        client {
            client()
            property "${MOD_ID}.test_elements.enabled", 'true'
            vmArg '-XX:+AllowEnhancedClassRedefinition' // Requires JBR
            ideConfigGenerated true
        }

        server {
            server()
            property "${MOD_ID}.test_elements.enabled", 'true'
            vmArg '-XX:+AllowEnhancedClassRedefinition' // Requires JBR
            ideConfigGenerated true
        }

        if(getRootProject().hasProperty('DEVLOGIN_VERSION')) {
            clientLogin {
                inherit runs.client
                programArgs '--launch_target', 'net.fabricmc.loader.impl.launch.knot.KnotClient'
                mainClass.set 'net.covers1624.devlogin.DevLogin'
            }
        }

        data {
            server()
            ideConfigGenerated true
            vmArg '-Dfabric-api.datagen'
            vmArg "-Dfabric-api.datagen.output-dir=${project(':common').file('src/generated/resources')}"
            vmArg "-Dfabric-api.datagen.modid=${MOD_ID}"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"

    mappings(loom.layered {
        officialMojangMappings()

        if(rootProject.hasProperty('PARCHMENT_MAPPINGS')) {
            if(rootProject.hasProperty('PARCHMENT_DEV_MINECRAFT_VERSION')) {
                parchment("org.parchmentmc.data:parchment-${PARCHMENT_DEV_MINECRAFT_VERSION}:${PARCHMENT_MAPPINGS}@zip")
            } else {
                parchment("org.parchmentmc.data:parchment-${MINECRAFT_VERSION}:${PARCHMENT_MAPPINGS}@zip")
            }
        }
    })

    modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"

    if(rootProject.hasProperty('FABRIC_API_MINECRAFT_VERSION')) {
        modApi "net.fabricmc.fabric-api:fabric-api:${FABRIC_API_VERSION}+${FABRIC_API_MINECRAFT_VERSION}"
    } else {
        modApi "net.fabricmc.fabric-api:fabric-api:${FABRIC_API_VERSION}+${MINECRAFT_VERSION}"
    }

    compileOnly project(path: ':common', configuration: 'namedElements')

    if(rootProject.hasProperty('DEVLOGIN_VERSION')) {
        localRuntime "net.covers1624:DevLogin:${DEVLOGIN_VERSION}"
    }

    if(rootProject.hasProperty('APEXCORE_DEV_VERSION')) {
        modImplementation "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_DEV_VERSION}+${MINECRAFT_VERSION}"
        include "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_DEV_VERSION}+${MINECRAFT_VERSION}"
    } else {
        modImplementation "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_VERSION}+${MINECRAFT_VERSION}"
        include "xyz.apex.minecraft.apexcore:apexcore-fabric:${APEXCORE_VERSION}+${MINECRAFT_VERSION}"
    }

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'com.google.errorprone:error_prone_annotations:2.11.0'
}

processResources {
    from project(':common').sourceSets.main.resources
}

compileJava {
    source project(':common').sourceSets.main.allSource
}

sourcesJar {
    from project(':common').sourceSets.main.allJava
}

collectJars {
    def tasks = [ remapJar, remapSourcesJar ]
    dependsOn tasks
    from tasks
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            loom.disableDeprecatedPomGeneration(it)

            artifact remapJar
            artifact sourcesJar
        }
    }
}

publishMods {
    file = remapJar.archiveFile
    changelog = rootProject.file('changelogs/changelog.md').exists() ? rootProject.file('changelogs/changelog.md').getText('UTF-8') : ''
    type = me.modmuss50.mpp.ReleaseType.ALPHA
    maxRetries = 5
    version = "${MOD_FULL_VERSION}"
    displayName = "[Fabric] ${MOD_NAME} - ${MOD_FULL_VERSION}+${MINECRAFT_VERSION}"
    modLoaders.add('fabric')
    additionalFiles.from(remapSourcesJar.archiveFile)
    dryRun = !providers.environmentVariable('MODRINTH_TOKEN').isPresent() || !providers.environmentVariable('CURSEFORGE_TOKEN').isPresent()

    curseforge {
        projectId = "${MOD_CURSEFORGE_ID}"
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN').getOrNull()
        minecraftVersions.add("${MINECRAFT_VERSION}")

        requires {
            slug = 'fabric-api'
        }
    }

    modrinth {
        projectId = "${MOD_MODRINTH_ID}"
        accessToken = providers.environmentVariable('MODRINTH_TOKEN').getOrNull()
        minecraftVersions.add("${MINECRAFT_VERSION}")

        requires {
            slug = 'fabric-api'
        }
    }
}