apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    bundle {
        canBeConsumed = false
        canBeResolved = true
    }

    common
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    runs {
        client {
            client()
            ideConfigGenerated true

            // Some of these may require JBR
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            vmArg '-XX:+IgnoreUnrecognizedVMOptions'
            vmArg '-XX:+AllowRedefinitionToAddDeleteMethods'

            // Does not work on forge
            /*afterEvaluate {
                vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            }*/
        }

        server {
            server()
            ideConfigGenerated true

            // Requires JBR
            vmArg '-XX:+AllowEnhancedClassRedefinition'
            vmArg '-XX:+IgnoreUnrecognizedVMOptions'
            vmArg '-XX:+AllowRedefinitionToAddDeleteMethods'

            // Does not work on forge
            /*afterEvaluate {
                vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            }*/
        }
    }

    forge {
        convertAccessWideners = true

        if(ACCESS_WIDENER_FILE.exists()) {
            extraAccessWideners.add ACCESS_WIDENER_FILE.name
        }

        if(getRootProject().file("platforms/common/src/main/resources/${MOD_ID}-common.mixins.json").exists()) {
            mixinConfig "${MOD_ID}-common.mixins.json"
        }

        if(getRootProject().file("platforms/mcforge/src/main/resources/${MOD_ID}.mixins.json").exists()) {
            mixinConfig "${MOD_ID}.mixins.json"
        }
    }

    mods {
        main {
            sourceSet project(':common').sourceSets.main
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    if(rootProject.hasProperty('MCFORGE_DEV_VERSION')) {
        forge "net.minecraftforge:forge:${MINECRAFT_VERSION}-${MCFORGE_DEV_VERSION}"
    } else {
        forge "net.minecraftforge:forge:${MINECRAFT_VERSION}-${MCFORGE_VERSION}"
    }

    annotationProcessor "org.spongepowered:mixin:${MIXIN_VERSION}:processor"

    bundle(project(path: ':common', configuration: 'transformProductionForge')) { transitive false }
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }

    if(rootProject.hasProperty('APEXCORE_DEV_VERSION')) {
        modImplementation "xyz.apex.minecraft.apexcore:apexcore-mcforge:${APEXCORE_DEV_VERSION}"
    } else {
        modImplementation "xyz.apex.minecraft.apexcore:apexcore-mcforge:${APEXCORE_VERSION}"
    }
}

jar {
    archiveClassifier = 'dev-slim'
}

shadowJar {
    exclude 'architectury.common.json'
    archiveClassifier = 'dev-shadow'
    configurations = [ project.configurations.bundle ]
}

remapJar {
    dependsOn shadowJar
    inputFile.set shadowJar.archiveFile
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}